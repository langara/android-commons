buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.langara'

android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode version_code
        versionName version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

dependencies {
    compile "com.android.support:appcompat-v7:$support_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "com.google.code.gson:gson:$gson_version"

    androidTestCompile "junit:junit:$test_junit_version"
    androidTestCompile "com.android.support.test:runner:$test_runner_version"
    androidTestCompile("org.mockito:mockito-core:$test_mockito_core_version") {
        exclude group: 'org.hamcrest'
    }
    androidTestCompile("com.google.dexmaker:dexmaker:$test_dexmaker_version") {
        exclude group: 'org.hamcrest'
    }
    androidTestCompile("com.google.dexmaker:dexmaker-mockito:$test_dexmaker_version") {
        exclude group: 'org.hamcrest'
    }
}

repositories {
    mavenCentral()
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//// build a jar with javadoc
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.getDestinationDir()
//}

artifacts {
    archives sourcesJar
//    archives javadocJar
}
